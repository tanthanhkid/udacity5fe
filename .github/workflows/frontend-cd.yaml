name: frontend-cd

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
  workflow_dispatch:

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      # Install the dependencies.
      - run: npm ci

      # Run the tests.
      - run: CI=true npm test

      # Run the linter.
      - run: npm run lint

  build:
    runs-on: ubuntu-latest
    needs: lint_and_test

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      # Install dependencies.
      - run: npm ci

      # Build the Docker image.
      - run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ env.REACT_APP_MOVIE_API_URL }} -t frontend:${{ github.sha }} .
          docker tag frontend:${{ github.sha }} ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
      # Configure AWS credentials. 
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        
      # Log in to Amazon ECR and push the Docker image.
      - run: |
          
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }}
          docker push ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Configure AWS credentials. 
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      # Set up kubectl.
      - run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.AWS_CLUSTER_NAME }}

      
      # Deploy the Docker image to the Kubernetes cluster.
      - run: |
          kubectl set image deployment/frontend frontend=${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
          kubectl apply -f deployment.yaml --validate=false
          kubectl apply -f service.yaml --validate=false
        working-directory: /k8s

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_URI: "593331310640.dkr.ecr.us-east-1.amazonaws.com/frontend"
  REACT_APP_MOVIE_API_URL: "http://localhost:5000" 
  AWS_CLUSTER_NAME: "cluster" 

